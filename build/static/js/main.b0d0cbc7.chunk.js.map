{"version":3,"sources":["firebase.js","Components/Post.js","Components/AddInput.js","Components/Feed.js","pages/About.js","pages/Home.js","pages/Policy.js","App.js","reportWebVitals.js","index.js"],"names":["firebaseApp","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","getStorage","db","getAuth","getFirestore","Post","id","text","image","timestamp","useState","title","setTitle","textRef","collection","editTask","a","setDoc","doc","serverTimestamp","merge","deleteTask","deleteDoc","console","log","className","src","alt","Date","toDate","toLocaleString","type","value","onChange","e","target","onClick","AddInput","textValue","setTextValue","setImage","onSubmit","preventDefault","S","fileName","Array","from","crypto","getRandomValues","Uint32Array","map","n","length","join","name","uploadBytesResumable","ref","on","err","alert","message","getDownloadURL","then","url","addDoc","placeholder","files","disabled","Feed","posts","setPosts","useEffect","q","query","orderBy","unSub","onSnapshot","snapshot","docs","data","item","About","to","Home","Policy","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0d0cbc7.chunk.js","sourcesContent":["//Firebase ver9 compliant (modular)\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getStorage } from \"firebase/storage\"; //追加\r\n\r\nconst firebaseApp = initializeApp({\r\n  apiKey: process.env.REACT_APP_FIREBASE_APIKEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n});\r\n//Firebase ver9 compliant (modular)\r\nexport const storage = getStorage(firebaseApp); //追加\r\nexport const auth = getAuth(firebaseApp);\r\nexport const db = getFirestore(firebaseApp);","import React, { useState } from \"react\";\r\nimport \"../App.css\";\r\nimport { db } from \"../firebase\";\r\nimport {\r\n  doc,\r\n  collection,\r\n  setDoc,\r\n  deleteDoc,\r\n  serverTimestamp,\r\n} from \"firebase/firestore\";\r\n\r\nconst Post = ({ id, text, image, timestamp }) => {\r\n  // 更新用のstate\r\n  const [title, setTitle] = useState(text);\r\n\r\n  //ポイント！(db, 'posts') ここがコレクション（箱）のことなので間違えないように！\r\n  const textRef = collection(db, \"posts\");\r\n\r\n  const editTask = async () => {\r\n    await setDoc(\r\n      doc(textRef, id),\r\n      {\r\n        text: title,\r\n        timestamp: serverTimestamp(),\r\n      },\r\n      { merge: true }\r\n    );\r\n  };\r\n\r\n  const deleteTask = async () => {\r\n    await deleteDoc(doc(textRef, id));\r\n  };\r\n  //↓これを使ってfirebaseに登録されているデータを確認している\r\n  console.log(id, \"props の id\");\r\n\r\n  return (\r\n    <div className=\"post\">\r\n      {/* 記述1. テキスト(text)情報を受け取る */}\r\n      <div className=\"text\">{text}</div>\r\n      {image && (\r\n        <div className=\"image\">\r\n          <img src={image} alt={text} />\r\n        </div>\r\n      )}\r\n      {/* 記述3. 日付(timestamp)情報を受け取る */}\r\n      {/* 注意！firebaseのtimestampはjsの形式に変換する必要があるのでnew Dateを使用している */}\r\n      <div className=\"date\">\r\n        {new Date(timestamp?.toDate()).toLocaleString()}\r\n      </div>\r\n\r\n      <hr />\r\n      {/* 更新用のinput */}\r\n      <input\r\n        type=\"text\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n      />\r\n      {/* 編集、削除のボタンを設置 */}\r\n      <button onClick={editTask}>編集</button>\r\n      <button onClick={deleteTask}>削除</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;","import React, { useState } from \"react\";\r\nimport { storage, db } from \"../firebase\";\r\n//Firebase ver9 compliant\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { collection, addDoc, serverTimestamp } from \"firebase/firestore\";\r\n\r\nconst AddInput = () => {\r\n  // useStateを準備　画像を保持する、入力された文字を保持する\r\n  const [textValue, setTextValue] = useState();\r\n  const [image, setImage] = useState(null);\r\n\r\n  const onChangeImageHandler = (e) => {\r\n    if (e.target.files[0]) {\r\n      setImage(e.target.files[0]);\r\n      e.target.value = \"\";\r\n    }\r\n  };\r\n//後で中身を記述\r\nconst sendClick = (e) => {\r\n    e.preventDefault();\r\n   \r\n   \r\n   \r\n    if (image) {\r\n // 画像 + テキストの処理\r\n      // firebaseの仕様で同じファイル名の画像を複数回アップしてしまうと元のファイルが削除される\r\n      // そのためにファイル名をランダムに作成する必要があるので「jsのテクニック」でランダムな文字列を作成\r\n      const S =\r\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"; //ランダムな文字列を作るための候補62文字\r\n      const N = 16;\r\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(N))) //乱数を生成してくれるもので0からランダムな数字が16個選ばれる\r\n        .map((n) => S[n % S.length])\r\n        .join(\"\");\r\n      const fileName = randomChar + \"_\" + image.name;\r\n      //Firebase ver9 compliant (firebase strageに登録している箇所↓)\r\n      const uploadImage = uploadBytesResumable(\r\n        ref(storage, `images/${fileName}`),\r\n        image\r\n      );\r\n //Firebase ver9 compliant\r\n uploadImage.on(\r\n    \"state_changed\",\r\n\r\n    () => {},\r\n    (err) => {\r\n      alert(err.message);\r\n    },\r\n    async () => {\r\n      //Firebase ver9 compliant\r\n      await getDownloadURL(ref(storage, `images/${fileName}`)).then(\r\n        async (url) => {\r\n          addDoc(collection(db, \"posts\"), {\r\n            image: url,\r\n            text: textValue,\r\n            timestamp: serverTimestamp(),\r\n          });\r\n        }\r\n      );\r\n    }\r\n  );\r\n\r\n      //後で記述\r\n    } else {\r\n      //Firebase ver9 compliant\r\n      addDoc(collection(db, \"posts\"), {\r\n        image: \"\",\r\n        text: textValue,\r\n        timestamp: serverTimestamp(),\r\n      });\r\n    }\r\n    // useStateを空にする=入力欄を空白にする処理\r\n    setImage(null);\r\n    setTextValue(\"\");\r\n  };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n      {/* 登録の処理 */}\r\n      {/* 記述1. formタグを記述 */}\r\n      <form onSubmit={sendClick}>\r\n        {/* 記述2.文字登録のinputを用意する */}\r\n        <input\r\n          placeholder=\"文字を入力\"\r\n          type=\"text\"\r\n          value={textValue}\r\n          onChange={(e) => setTextValue(e.target.value)}\r\n        />\r\n\r\n        {/* 記述3.画像登録のinputを用意する */}\r\n        <input type=\"file\" onChange={onChangeImageHandler} />\r\n\r\n        \r\n\r\n        <button\r\n          type=\"submit\"\r\n          disabled={!textValue} //textValueが空の時は送信できない\r\n        >\r\n          送信する\r\n        </button>\r\n        <hr />\r\n      </form>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AddInput\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase\";\r\n//Firebase ver9 compliant\r\nimport { collection, query, onSnapshot, orderBy } from \"firebase/firestore\";\r\nimport Post from \"./Post\";\r\nimport AddInput from \"./AddInput\";\r\nimport \"../index.css\";\r\n\r\nconst Feed = () => {\r\n   // firebaseに作成した項目を受け取るための変数 = useState\r\n  // 記述1. useStateを準備する\r\n  const [posts, setPosts] = useState([\r\n    {\r\n      id: \"\",\r\n      image: \"\",\r\n      text: \"\",\r\n      timestamp: null,\r\n    },\r\n  ]);\r\n   // 記述2.useEffectを使ってデータを取得する\r\n   useEffect(() => {\r\n    //Firebase ver9 compliant (modular)\r\n    const q = query(collection(db, \"posts\"), orderBy(\"timestamp\", \"desc\"));\r\n    const unSub = onSnapshot(q, (snapshot) => {\r\n      setPosts(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          image: doc.data().image,\r\n          text: doc.data().text,\r\n          timestamp: doc.data().timestamp,\r\n        }))\r\n      );\r\n    });\r\n    return () => {\r\n      unSub();\r\n    };\r\n  }, []);\r\n  console.log(posts, \"useStateの中身\"); //データの流れを確認しましょう！\r\n\r\n    return (\r\n        <div className=\"imageItem\">\r\n            {/* 記述４addinputを読み込む */}\r\n            <AddInput />\r\n            {/* 記述3.Postコンポーネントにデータを流し込む */}\r\n      {/* && は存在するときのみ実行されるという書き方 */}\r\n      {posts &&\r\n        posts.map((item) => (\r\n          <Post\r\n           id={item.id}\r\n            key={item.id}\r\n            image={item.image}\r\n            text={item.text}\r\n            timestamp={item.timestamp}\r\n          />\r\n        ))}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feed\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <Link to=\"/home\">Home</Link>　\r\n            <Link to=\"/policy\">ポリシー</Link>\r\n            <p>会社概要</p>\r\n            <p>XXXXXX合同会社</p>\r\n\r\n            <p>お問い合わせ</p>\r\n            <p>●●●@gmail.com</p>\r\n\r\n            <p>GoogleMAP</p>\r\n\r\n            \r\n\r\n        \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      公式SNS　Instagram　Twitter　\r\n      <Link to=\"/policy\">プライバシーポリシー</Link>　\r\n     <Link to=\"/about\">会社概要</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Policy = () => {\r\n    return (\r\n        <div>\r\n            <Link to=\"/home\">Home</Link>\r\n            <p>プライバシーポリシー\r\n＿＿＿＿＿＿＿＿（以下，「当社」といいます。）は，本ウェブサイト上で提供するサービス（以下,「本サービス」といいます。）における，ユーザーの個人情報の取扱いについて，以下のとおりプライバシーポリシー（以下，「本ポリシー」といいます。）を定めます。\r\n\r\n第1条（個人情報）\r\n「個人情報」とは，個人情報保護法にいう「個人情報」を指すものとし，生存する個人に関する情報であって，当該情報に含まれる氏名，生年月日，住所，電話番号，連絡先その他の記述等により特定の個人を識別できる情報及び容貌，指紋，声紋にかかるデータ，及び健康保険証の保険者番号などの当該情報単体から特定の個人を識別できる情報（個人識別情報）を指します。\r\n\r\n第2条（個人情報の収集方法）\r\n当社は，ユーザーが利用登録をする際に氏名，生年月日，住所，電話番号，メールアドレス，銀行口座番号，クレジットカード番号，運転免許証番号などの個人情報をお尋ねすることがあります。また，ユーザーと提携先などとの間でなされたユーザーの個人情報を含む取引記録や決済に関する情報を,当社の提携先（情報提供元，広告主，広告配信先などを含みます。以下，｢提携先｣といいます。）などから収集することがあります。\r\n\r\n第3条（個人情報を収集・利用する目的）\r\n当社が個人情報を収集・利用する目的は，以下のとおりです。\r\n\r\n当社サービスの提供・運営のため\r\nユーザーからのお問い合わせに回答するため（本人確認を行うことを含む）\r\nユーザーが利用中のサービスの新機能，更新情報，キャンペーン等及び当社が提供する他のサービスの案内のメールを送付するため\r\nメンテナンス，重要なお知らせなど必要に応じたご連絡のため\r\n利用規約に違反したユーザーや，不正・不当な目的でサービスを利用しようとするユーザーの特定をし，ご利用をお断りするため\r\nユーザーにご自身の登録情報の閲覧や変更，削除，ご利用状況の閲覧を行っていただくため\r\n有料サービスにおいて，ユーザーに利用料金を請求するため\r\n上記の利用目的に付随する目的\r\n第4条（利用目的の変更）\r\n当社は，利用目的が変更前と関連性を有すると合理的に認められる場合に限り，個人情報の利用目的を変更するものとします。\r\n利用目的の変更を行った場合には，変更後の目的について，当社所定の方法により，ユーザーに通知し，または本ウェブサイト上に公表するものとします。\r\n第5条（個人情報の第三者提供）\r\n当社は，次に掲げる場合を除いて，あらかじめユーザーの同意を得ることなく，第三者に個人情報を提供することはありません。ただし，個人情報保護法その他の法令で認められる場合を除きます。\r\n人の生命，身体または財産の保護のために必要がある場合であって，本人の同意を得ることが困難であるとき\r\n公衆衛生の向上または児童の健全な育成の推進のために特に必要がある場合であって，本人の同意を得ることが困難であるとき\r\n国の機関もしくは地方公共団体またはその委託を受けた者が法令の定める事務を遂行することに対して協力する必要がある場合であって，本人の同意を得ることにより当該事務の遂行に支障を及ぼすおそれがあるとき\r\n予め次の事項を告知あるいは公表し，かつ当社が個人情報保護委員会に届出をしたとき\r\n利用目的に第三者への提供を含むこと\r\n第三者に提供されるデータの項目\r\n第三者への提供の手段または方法\r\n本人の求めに応じて個人情報の第三者への提供を停止すること\r\n本人の求めを受け付ける方法\r\n前項の定めにかかわらず，次に掲げる場合には，当該情報の提供先は第三者に該当しないものとします。\r\n当社が利用目的の達成に必要な範囲内において個人情報の取扱いの全部または一部を委託する場合\r\n合併その他の事由による事業の承継に伴って個人情報が提供される場合\r\n個人情報を特定の者との間で共同して利用する場合であって，その旨並びに共同して利用される個人情報の項目，共同して利用する者の範囲，利用する者の利用目的および当該個人情報の管理について責任を有する者の氏名または名称について，あらかじめ本人に通知し，または本人が容易に知り得る状態に置いた場合\r\n第6条（個人情報の開示）\r\n当社は，本人から個人情報の開示を求められたときは，本人に対し，遅滞なくこれを開示します。ただし，開示することにより次のいずれかに該当する場合は，その全部または一部を開示しないこともあり，開示しない決定をした場合には，その旨を遅滞なく通知します。なお，個人情報の開示に際しては，1件あたり1，000円の手数料を申し受けます。\r\n本人または第三者の生命，身体，財産その他の権利利益を害するおそれがある場合\r\n当社の業務の適正な実施に著しい支障を及ぼすおそれがある場合\r\nその他法令に違反することとなる場合\r\n前項の定めにかかわらず，履歴情報および特性情報などの個人情報以外の情報については，原則として開示いたしません。\r\n第7条（個人情報の訂正および削除）\r\nユーザーは，当社の保有する自己の個人情報が誤った情報である場合には，当社が定める手続きにより，当社に対して個人情報の訂正，追加または削除（以下，「訂正等」といいます。）を請求することができます。\r\n当社は，ユーザーから前項の請求を受けてその請求に応じる必要があると判断した場合には，遅滞なく，当該個人情報の訂正等を行うものとします。\r\n当社は，前項の規定に基づき訂正等を行った場合，または訂正等を行わない旨の決定をしたときは遅滞なく，これをユーザーに通知します。\r\n第8条（個人情報の利用停止等）\r\n当社は，本人から，個人情報が，利用目的の範囲を超えて取り扱われているという理由，または不正の手段により取得されたものであるという理由により，その利用の停止または消去（以下，「利用停止等」といいます。）を求められた場合には，遅滞なく必要な調査を行います。\r\n前項の調査結果に基づき，その請求に応じる必要があると判断した場合には，遅滞なく，当該個人情報の利用停止等を行います。\r\n当社は，前項の規定に基づき利用停止等を行った場合，または利用停止等を行わない旨の決定をしたときは，遅滞なく，これをユーザーに通知します。\r\n前2項にかかわらず，利用停止等に多額の費用を有する場合その他利用停止等を行うことが困難な場合であって，ユーザーの権利利益を保護するために必要なこれに代わるべき措置をとれる場合は，この代替策を講じるものとします。\r\n第9条（プライバシーポリシーの変更）\r\n本ポリシーの内容は，法令その他本ポリシーに別段の定めのある事項を除いて，ユーザーに通知することなく，変更することができるものとします。\r\n当社が別途定める場合を除いて，変更後のプライバシーポリシーは，本ウェブサイトに掲載したときから効力を生じるものとします。\r\n第10条（お問い合わせ窓口）\r\n本ポリシーに関するお問い合わせは，下記の窓口までお願いいたします。\r\n\r\n住所：\r\n社名：\r\n担当部署：\r\nEメールアドレス：\r\n\r\n以上</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Policy\r\n","import \"./App.css\";\n// import Post from \"./Components/Post\";\n// import Item from \"./Components/Item\";\n// import Box from '@mui/material/Box';\n// import { createSvgIcon } from '@mui/material/utils';\nimport Feed from \"./Components/Feed\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport About from \"./pages/About\";\nimport Home from \"./pages/Home\"; \nimport Policy from \"./pages/Policy\";\n// import Contact from \"./Components/Contact\";\n// import Stack from \"@mui/material/Stack\";\n// import Button from \"@mui/material/Button\";\n\nfunction App() {\n\n  return (\n    \n    <div className=\"App\">\n     <h1>データ表示（in <span>Fire</span>Base)</h1> \n     \n     <hr/>\n        <Feed />\n        <hr/>\n\n        <BrowserRouter>\n        <Routes>\n          {/* 遷移させたい画面を記述する */}\n          <Route path=\"/home\" element={<Home />} />\n          \n          <Route path=\"/about\" element={<About />} />\n          <Route path=\"/policy\" element={<Policy />} />\n          {/* <Route path=\"/contact\" element={<Contact />} /> */}\n          {/* 遷移させたい画面を記述する */}\n         \n        </Routes>\n       </BrowserRouter><br/>\n\n    </div>\n  );\n  }\n  \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}